// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StockMarket.TestsBDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StockMarketSearchFeature : object, Xunit.IClassFixture<StockMarketSearchFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StockMarketSearch.feature"
#line hidden
        
        public StockMarketSearchFeature(StockMarketSearchFeature.FixtureData fixtureData, StockMarket_TestsBDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "StockMarketSearch", "As I User I Want To Search Tickers of stock market companies", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Real Time Tickers")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketSearch")]
        [Xunit.TraitAttribute("Description", "Real Time Tickers")]
        public void RealTimeTickers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Real Time Tickers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "email",
                            "password"});
                table1.AddRow(new string[] {
                            "dimitri",
                            "dimitri_menezes@test.com",
                            "qwerty"});
#line 6
 testRunner.Given("I am registred", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "code"});
                table2.AddRow(new string[] {
                            "Microsoft",
                            "MSFT"});
                table2.AddRow(new string[] {
                            "Tesla",
                            "TSLA"});
                table2.AddRow(new string[] {
                            "CGI",
                            "TSE"});
#line 9
 testRunner.And("I Have Entreprises registred", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "code"});
                table3.AddRow(new string[] {
                            "TSE"});
                table3.AddRow(new string[] {
                            "TSLA"});
#line 14
 testRunner.When("I search for Real Time Tickers", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "date",
                            "low",
                            "high",
                            "current",
                            "open"});
                table4.AddRow(new string[] {
                            "TSE",
                            "2023-06-07 12:00",
                            "208",
                            "209",
                            "208.5",
                            "209"});
                table4.AddRow(new string[] {
                            "TSLA",
                            "2023-06-07 14:00",
                            "199.8",
                            "205",
                            "201",
                            "200"});
#line 18
 testRunner.Then("the result is", ((string)(null)), table4, "Then ");
#line hidden
#line 22
 testRunner.And("A search log is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Historical Tickers")]
        [Xunit.TraitAttribute("FeatureTitle", "StockMarketSearch")]
        [Xunit.TraitAttribute("Description", "Historical Tickers")]
        public void HistoricalTickers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Historical Tickers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "email",
                            "password"});
                table5.AddRow(new string[] {
                            "dimitri",
                            "dimitri_menezes@test.com",
                            "qwerty"});
#line 26
 testRunner.Given("I am registred", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "code"});
                table6.AddRow(new string[] {
                            "Microsoft",
                            "MSFT"});
                table6.AddRow(new string[] {
                            "Tesla",
                            "TSLA"});
                table6.AddRow(new string[] {
                            "CGI",
                            "TSE"});
#line 29
 testRunner.And("I Have Entreprises registred", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "startDate",
                            "endDate"});
                table7.AddRow(new string[] {
                            "MSFT",
                            "2023-06-01",
                            "2023-06-06 23:59:59"});
#line 34
 testRunner.When("I search for Historical Tickers", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "date",
                            "low",
                            "high",
                            "close",
                            "volume"});
                table8.AddRow(new string[] {
                            "MSFT",
                            "2023-06-06 16:00",
                            "122.1",
                            "129",
                            "127",
                            "123"});
                table8.AddRow(new string[] {
                            "MSFT",
                            "2023-06-05 16:00",
                            "126",
                            "127",
                            "126.2",
                            "543"});
                table8.AddRow(new string[] {
                            "MSFT",
                            "2023-06-01 16:00",
                            "128",
                            "123",
                            "124",
                            "765"});
#line 37
 testRunner.Then("the result is", ((string)(null)), table8, "Then ");
#line hidden
#line 42
 testRunner.And("A search log is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StockMarketSearchFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StockMarketSearchFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
